// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot test (us-east-1) 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AuthFunctionEdge19E98FE7": {
      "DependsOn": [
        "AuthFunctionEdgeServiceRoleBB411F40",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-us-east-1",
          },
          "S3Key": "c2dc435b08f41e1dd3dadd3c70055696230a63cc3582c14626c677114963950d.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AuthFunctionEdgeServiceRoleBB411F40",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "AuthFunctionEdgeCurrentVersion83D0C2861fff210d5e13dc7134e37faf6b414810": {
      "Properties": {
        "FunctionName": {
          "Ref": "AuthFunctionEdge19E98FE7",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "AuthFunctionEdgeServiceRoleBB411F40": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "edgelambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "FunctionVersion2F1C2C49": {
      "Properties": {
        "Type": "String",
        "Value": {
          "Ref": "AuthFunctionEdgeCurrentVersion83D0C2861fff210d5e13dc7134e37faf6b414810",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Snapshot test 1`] = `
{
  "Outputs": {
    "CFGatewayEndpoint6E5D27DB": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "CFGatewayFrontendDistribution2264C2A4",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E",
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-ap-northeast-1",
          },
          "S3Key": "97f30e67419a1676a2215492723e5add1aa491caf0cbe2dd878fc4fab0468cd4.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
            },
            {
              "Action": [
                "rds-data:BatchExecuteStatement",
                "rds-data:BeginTransaction",
                "rds-data:CommitTransaction",
                "rds-data:ExecuteStatement",
                "rds-data:RollbackTransaction",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds:ap-northeast-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":cluster:",
                    {
                      "Ref": "PostgresCluster53E5BDAB",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiLambdaServiceEncryptionSecret3961CF8B": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "PasswordLength": 42,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiLambdaServiceHandlerAllowCloudFrontServicePrincipal69CA6CB5": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "Action": "lambda:InvokeFunctionUrl",
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiLambdaServiceHandlerB5B1C02E",
            "Arn",
          ],
        },
        "Principal": "cloudfront.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:cloudfront::",
              {
                "Ref": "AWS::AccountId",
              },
              ":distribution/",
              {
                "Ref": "CFGatewayFrontendDistribution2264C2A4",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiLambdaServiceHandlerB5B1C02E": {
      "DependsOn": [
        "ApiLambdaServiceHandlerServiceRoleDefaultPolicy2F1FF703",
        "ApiLambdaServiceHandlerServiceRole2A914F5A",
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.ap-northeast-1.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-ap-northeast-1:c024269f6d3f1f2c49b73374d3b98c0bca5969cbc7869a8cc7fca394445ad42c",
          },
        },
        "Environment": {
          "Variables": {
            "CELERY_BROKER_URL": {
              "Fn::GetAtt": [
                "RedisBrokerUrlA8582E06",
                "Value",
              ],
            },
            "CLOUDFRONT_URL_PARAMETER": {
              "Ref": "CFGatewayUrl49DE3894",
            },
            "CODE_EXECUTION_API_KEY": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                  },
                  ":SecretString:::}}",
                ],
              ],
            },
            "CODE_EXECUTION_ENDPOINT": {
              "Fn::Join": [
                "",
                [
                  "http://",
                  {
                    "Fn::GetAtt": [
                      "ApiServiceFargateServiceCloudmapService27F89EE8",
                      "Name",
                    ],
                  },
                  ".difyns:8194",
                ],
              ],
            },
            "CONSOLE_CORS_ALLOW_ORIGINS": "*",
            "DB_DATABASE": "main",
            "DB_HOST": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                  },
                  ":SecretString:host::}}",
                ],
              ],
            },
            "DB_PASSWORD": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                  },
                  ":SecretString:password::}}",
                ],
              ],
            },
            "DB_PORT": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                  },
                  ":SecretString:port::}}",
                ],
              ],
            },
            "DB_USERNAME": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                  },
                  ":SecretString:username::}}",
                ],
              ],
            },
            "DEBUG": "false",
            "LOG_LEVEL": "ERROR",
            "MODE": "api",
            "MPLCONFIGDIR": "/tmp/.config",
            "PGVECTOR_DATABASE": "pgvector",
            "PGVECTOR_HOST": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                  },
                  ":SecretString:host::}}",
                ],
              ],
            },
            "PGVECTOR_PASSWORD": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                  },
                  ":SecretString:password::}}",
                ],
              ],
            },
            "PGVECTOR_PORT": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                  },
                  ":SecretString:port::}}",
                ],
              ],
            },
            "PGVECTOR_USER": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                  },
                  ":SecretString:username::}}",
                ],
              ],
            },
            "REDIS_DB": "0",
            "REDIS_HOST": {
              "Fn::GetAtt": [
                "RedisFF642DF2",
                "PrimaryEndPoint.Address",
              ],
            },
            "REDIS_PASSWORD": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "RedisAuthToken9E34F6A5",
                  },
                  ":SecretString:::}}",
                ],
              ],
            },
            "REDIS_PORT": "6379",
            "REDIS_USE_SSL": "true",
            "S3_BUCKET_NAME": {
              "Ref": "StorageBucket19DB2FF8",
            },
            "S3_REGION": "ap-northeast-1",
            "SECRET_KEY": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "ApiLambdaServiceEncryptionSecret3961CF8B",
                  },
                  ":SecretString:::}}",
                ],
              ],
            },
            "STORAGE_TYPE": "s3",
            "TRANSFORMERS_CACHE": "/tmp/.cache",
            "VECTOR_STORE": "pgvector",
            "WEB_API_CORS_ALLOW_ORIGINS": "*",
          },
        },
        "MemorySize": 1769,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "ApiLambdaServiceHandlerServiceRole2A914F5A",
            "Arn",
          ],
        },
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "ApiLambdaServiceHandlerSecurityGroup12E77614",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Ref": "VpcPrivateSubnet1Subnet536B997A",
            },
            {
              "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiLambdaServiceHandlerFunctionUrlF39EE6BC": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "AuthType": "AWS_IAM",
        "InvokeMode": "RESPONSE_STREAM",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "ApiLambdaServiceHandlerB5B1C02E",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Url",
    },
    "ApiLambdaServiceHandlerSecurityGroup12E77614": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function TestStackApiLambdaServiceHandlerF265198A",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ApiLambdaServiceHandlerServiceRole2A914F5A": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiLambdaServiceHandlerServiceRoleDefaultPolicy2F1FF703": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StorageBucket19DB2FF8",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StorageBucket19DB2FF8",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:ap-northeast-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Ref": "CFGatewayUrl49DE3894",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "bedrock:InvokeModel",
                "bedrock:InvokeModelWithResponseStream",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiLambdaServiceHandlerServiceRoleDefaultPolicy2F1FF703",
        "Roles": [
          {
            "Ref": "ApiLambdaServiceHandlerServiceRole2A914F5A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiServiceEncryptionSecretF73F9ECD": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "PasswordLength": 42,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiServiceFargateServiceCloudmapService27F89EE8": {
      "DependsOn": [
        "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC",
        "ApiServiceTaskTaskRole06F87EBE",
      ],
      "Properties": {
        "DnsConfig": {
          "DnsRecords": [
            {
              "TTL": 60,
              "Type": "A",
            },
          ],
          "NamespaceId": {
            "Fn::GetAtt": [
              "EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": {
          "FailureThreshold": 1,
        },
        "Name": "sandbox",
        "NamespaceId": {
          "Fn::GetAtt": [
            "EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "ApiServiceFargateServiceE4EA9E4E": {
      "DependsOn": [
        "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC",
        "ApiServiceTaskTaskRole06F87EBE",
      ],
      "Properties": {
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Weight": 0,
          },
          {
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 1,
          },
        ],
        "Cluster": {
          "Ref": "EcsCluster97242B84",
        },
        "DeploymentConfiguration": {
          "Alarms": {
            "AlarmNames": [],
            "Enable": false,
            "Rollback": false,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "EnableECSManagedTags": false,
        "EnableExecuteCommand": true,
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "ApiServiceFargateServiceSecurityGroupE31C96C6",
                  "GroupId",
                ],
              },
            ],
            "Subnets": [
              {
                "Ref": "VpcPrivateSubnet1Subnet536B997A",
              },
              {
                "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
              },
            ],
          },
        },
        "ServiceRegistries": [
          {
            "RegistryArn": {
              "Fn::GetAtt": [
                "ApiServiceFargateServiceCloudmapService27F89EE8",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": {
          "Ref": "ApiServiceTask878B1807",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "ApiServiceFargateServiceSecurityGroupE31C96C6": {
      "DependsOn": [
        "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC",
        "ApiServiceTaskTaskRole06F87EBE",
      ],
      "Properties": {
        "GroupDescription": "TestStack/ApiService/FargateService/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ApiServiceFargateServiceSecurityGroupfromTestStackApiLambdaServiceHandlerSecurityGroup560B94828194BAA6DFB1": {
      "DependsOn": [
        "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC",
        "ApiServiceTaskTaskRole06F87EBE",
      ],
      "Properties": {
        "Description": "from TestStackApiLambdaServiceHandlerSecurityGroup560B9482:8194",
        "FromPort": 8194,
        "GroupId": {
          "Fn::GetAtt": [
            "ApiServiceFargateServiceSecurityGroupE31C96C6",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ApiLambdaServiceHandlerSecurityGroup12E77614",
            "GroupId",
          ],
        },
        "ToPort": 8194,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ApiServiceTask878B1807": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "GIN_MODE",
                "Value": "release",
              },
              {
                "Name": "WORKER_TIMEOUT",
                "Value": "15",
              },
              {
                "Name": "ENABLE_NETWORK",
                "Value": "true",
              },
            ],
            "Essential": true,
            "Image": {
              "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.ap-northeast-1.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-ap-northeast-1:b369a455bc8affa2472cccc40944c6fb547f3e91966fa1d0ef9b714bd3b592b6",
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "ApiServiceTaskSandboxLogGroupDDF292A0",
                },
                "awslogs-region": "ap-northeast-1",
                "awslogs-stream-prefix": "log",
              },
            },
            "Name": "Sandbox",
            "PortMappings": [
              {
                "ContainerPort": 8194,
                "Protocol": "tcp",
              },
            ],
            "Secrets": [
              {
                "Name": "API_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
            ],
          },
        ],
        "Cpu": "512",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "ApiServiceTaskExecutionRoleFE812553",
            "Arn",
          ],
        },
        "Family": "TestStackApiServiceTaskBFA8CBF7",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "RuntimePlatform": {
          "CpuArchitecture": "X86_64",
        },
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "ApiServiceTaskTaskRole06F87EBE",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "ApiServiceTaskExecutionRoleDefaultPolicy38AB6296": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:ap-northeast-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/",
                    {
                      "Fn::Sub": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-ap-northeast-1",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ApiServiceTaskSandboxLogGroupDDF292A0",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "ApiServiceEncryptionSecretF73F9ECD",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiServiceTaskExecutionRoleDefaultPolicy38AB6296",
        "Roles": [
          {
            "Ref": "ApiServiceTaskExecutionRoleFE812553",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiServiceTaskExecutionRoleFE812553": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiServiceTaskSandboxLogGroupDDF292A0": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiServiceTaskTaskRole06F87EBE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiServiceTaskTaskRoleDefaultPolicy982AD2DC",
        "Roles": [
          {
            "Ref": "ApiServiceTaskTaskRole06F87EBE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CFGatewayCachePolicyc85ef56bb2e4aa8f4099123cfefc200d2857b4e48cDC32718D": {
      "Properties": {
        "CachePolicyConfig": {
          "DefaultTTL": 0,
          "MaxTTL": 31536000,
          "MinTTL": 0,
          "Name": "TestStackCFGatewayCachePolicyc85ef56bb2e4aa8f4099123cfefc200d2857b4e48cFC99D607-ap-northeast-1",
          "ParametersInCacheKeyAndForwardedToOrigin": {
            "CookiesConfig": {
              "CookieBehavior": "all",
            },
            "EnableAcceptEncodingBrotli": true,
            "EnableAcceptEncodingGzip": true,
            "HeadersConfig": {
              "HeaderBehavior": "whitelist",
              "Headers": [
                "authorization",
                "Origin",
                "X-HTTP-Method-Override",
                "X-HTTP-Method",
                "X-Method-Override",
              ],
            },
            "QueryStringsConfig": {
              "QueryStringBehavior": "all",
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "CFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf6523D26FF03": {
      "Properties": {
        "CachePolicyConfig": {
          "DefaultTTL": 0,
          "MaxTTL": 31536000,
          "MinTTL": 0,
          "Name": "TestStackCFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf652EA07334F-ap-northeast-1",
          "ParametersInCacheKeyAndForwardedToOrigin": {
            "CookiesConfig": {
              "CookieBehavior": "all",
            },
            "EnableAcceptEncodingBrotli": true,
            "EnableAcceptEncodingGzip": true,
            "HeadersConfig": {
              "HeaderBehavior": "whitelist",
              "Headers": [
                "authorization",
                "Origin",
                "X-HTTP-Method-Override",
                "X-HTTP-Method",
                "X-Method-Override",
              ],
            },
            "QueryStringsConfig": {
              "QueryStringBehavior": "all",
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "CFGatewayFrontendDistribution2264C2A4": {
      "Properties": {
        "DistributionConfig": {
          "CacheBehaviors": [
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": {
                "Ref": "CFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf6523D26FF03",
              },
              "Compress": true,
              "LambdaFunctionAssociations": [
                {
                  "EventType": "origin-request",
                  "IncludeBody": true,
                  "LambdaFunctionARN": {
                    "Fn::GetAtt": [
                      "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E",
                      "Parameter.Value",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/console/api",
              "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin2C8C6956D",
              "ViewerProtocolPolicy": "allow-all",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": {
                "Ref": "CFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf6523D26FF03",
              },
              "Compress": true,
              "LambdaFunctionAssociations": [
                {
                  "EventType": "origin-request",
                  "IncludeBody": true,
                  "LambdaFunctionARN": {
                    "Fn::GetAtt": [
                      "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E",
                      "Parameter.Value",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/api",
              "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin2C8C6956D",
              "ViewerProtocolPolicy": "allow-all",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": {
                "Ref": "CFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf6523D26FF03",
              },
              "Compress": true,
              "LambdaFunctionAssociations": [
                {
                  "EventType": "origin-request",
                  "IncludeBody": true,
                  "LambdaFunctionARN": {
                    "Fn::GetAtt": [
                      "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E",
                      "Parameter.Value",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/v1",
              "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin2C8C6956D",
              "ViewerProtocolPolicy": "allow-all",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": {
                "Ref": "CFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf6523D26FF03",
              },
              "Compress": true,
              "LambdaFunctionAssociations": [
                {
                  "EventType": "origin-request",
                  "IncludeBody": true,
                  "LambdaFunctionARN": {
                    "Fn::GetAtt": [
                      "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E",
                      "Parameter.Value",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/files",
              "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin2C8C6956D",
              "ViewerProtocolPolicy": "allow-all",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": {
                "Ref": "CFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf6523D26FF03",
              },
              "Compress": true,
              "LambdaFunctionAssociations": [
                {
                  "EventType": "origin-request",
                  "IncludeBody": true,
                  "LambdaFunctionARN": {
                    "Fn::GetAtt": [
                      "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E",
                      "Parameter.Value",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/console/api/*",
              "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin2C8C6956D",
              "ViewerProtocolPolicy": "allow-all",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": {
                "Ref": "CFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf6523D26FF03",
              },
              "Compress": true,
              "LambdaFunctionAssociations": [
                {
                  "EventType": "origin-request",
                  "IncludeBody": true,
                  "LambdaFunctionARN": {
                    "Fn::GetAtt": [
                      "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E",
                      "Parameter.Value",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/api/*",
              "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin2C8C6956D",
              "ViewerProtocolPolicy": "allow-all",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": {
                "Ref": "CFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf6523D26FF03",
              },
              "Compress": true,
              "LambdaFunctionAssociations": [
                {
                  "EventType": "origin-request",
                  "IncludeBody": true,
                  "LambdaFunctionARN": {
                    "Fn::GetAtt": [
                      "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E",
                      "Parameter.Value",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/v1/*",
              "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin2C8C6956D",
              "ViewerProtocolPolicy": "allow-all",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": {
                "Ref": "CFGatewayCachePolicyc8f89552a050fc8a7b40f74547a929f01eba0cf6523D26FF03",
              },
              "Compress": true,
              "LambdaFunctionAssociations": [
                {
                  "EventType": "origin-request",
                  "IncludeBody": true,
                  "LambdaFunctionARN": {
                    "Fn::GetAtt": [
                      "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E",
                      "Parameter.Value",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/files/*",
              "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin2C8C6956D",
              "ViewerProtocolPolicy": "allow-all",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": {
                "Ref": "CFGatewayCachePolicyc85ef56bb2e4aa8f4099123cfefc200d2857b4e48cDC32718D",
              },
              "Compress": true,
              "LambdaFunctionAssociations": [
                {
                  "EventType": "origin-request",
                  "IncludeBody": true,
                  "LambdaFunctionARN": {
                    "Fn::GetAtt": [
                      "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E",
                      "Parameter.Value",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/*",
              "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin39851D8AA",
              "ViewerProtocolPolicy": "allow-all",
            },
          ],
          "Comment": "Dify Distribution",
          "CustomErrorResponses": [
            {
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/",
            },
          ],
          "DefaultCacheBehavior": {
            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
            "Compress": true,
            "TargetOriginId": "TestStackCFGatewayFrontendDistributionOrigin13610168B",
            "ViewerProtocolPolicy": "allow-all",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": [
            {
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2",
                ],
              },
              "DomainName": "www.example.com",
              "Id": "TestStackCFGatewayFrontendDistributionOrigin13610168B",
            },
            {
              "ConnectionTimeout": 6,
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2",
                ],
              },
              "DomainName": {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaServiceHandlerFunctionUrlF39EE6BC",
                          "FunctionUrl",
                        ],
                      },
                    ],
                  },
                ],
              },
              "Id": "TestStackCFGatewayFrontendDistributionOrigin2C8C6956D",
              "OriginAccessControlId": {
                "Fn::GetAtt": [
                  "CFGatewayLambdaOac440460EE",
                  "Id",
                ],
              },
            },
            {
              "ConnectionTimeout": 6,
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2",
                ],
              },
              "DomainName": {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Fn::GetAtt": [
                          "WebLambdaServiceHandlerFunctionUrlC1B14071",
                          "FunctionUrl",
                        ],
                      },
                    ],
                  },
                ],
              },
              "Id": "TestStackCFGatewayFrontendDistributionOrigin39851D8AA",
              "OriginAccessControlId": {
                "Fn::GetAtt": [
                  "CFGatewayLambdaOac440460EE",
                  "Id",
                ],
              },
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "CFGatewayLambdaOac440460EE": {
      "Properties": {
        "OriginAccessControlConfig": {
          "Name": "OAC for lambda fURL(c82db70dcbcf68339129790eb28adab4a94addb6e5)",
          "OriginAccessControlOriginType": "lambda",
          "SigningBehavior": "always",
          "SigningProtocol": "sigv4",
        },
      },
      "Type": "AWS::CloudFront::OriginAccessControl",
    },
    "CFGatewayUpdateUrlParameter1BD235C6": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CFGatewayUpdateUrlParameterCustomResourcePolicyA725D913",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"SSM","action":"putParameter","parameters":{"Name":"",
              {
                "Ref": "CFGatewayUrl49DE3894",
              },
              "","Overwrite":true,"Value":"https://",
              {
                "Fn::GetAtt": [
                  "CFGatewayFrontendDistribution2264C2A4",
                  "DomainName",
                ],
              },
              ""},"physicalResourceId":{"id":"https://",
              {
                "Fn::GetAtt": [
                  "CFGatewayFrontendDistribution2264C2A4",
                  "DomainName",
                ],
              },
              ""}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"SSM","action":"putParameter","parameters":{"Name":"",
              {
                "Ref": "CFGatewayUrl49DE3894",
              },
              "","Overwrite":true,"Value":"https://",
              {
                "Fn::GetAtt": [
                  "CFGatewayFrontendDistribution2264C2A4",
                  "DomainName",
                ],
              },
              ""},"physicalResourceId":{"id":"https://",
              {
                "Fn::GetAtt": [
                  "CFGatewayFrontendDistribution2264C2A4",
                  "DomainName",
                ],
              },
              ""}}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "CFGatewayUpdateUrlParameterCustomResourcePolicyA725D913": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:ap-northeast-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Ref": "CFGatewayUrl49DE3894",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CFGatewayUpdateUrlParameterCustomResourcePolicyA725D913",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CFGatewayUrl49DE3894": {
      "Properties": {
        "Type": "String",
        "Value": "dummy",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "CustomCrossRegionExportReaderCustomResourceProviderHandler46647B68": {
      "DependsOn": [
        "CustomCrossRegionExportReaderCustomResourceProviderRole10531BBD",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-ap-northeast-1",
          },
          "S3Key": "8acca95a9957d02a9f3ec124c9869c5d5b70a7fb3e332120850781ecc9363037.zip",
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomCrossRegionExportReaderCustomResourceProviderRole10531BBD",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCrossRegionExportReaderCustomResourceProviderRole10531BBD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ssm:AddTagsToResource",
                    "ssm:RemoveTagsFromResource",
                    "ssm:GetParameters",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":ssm:ap-northeast-1:",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":parameter/cdk/exports/TestStack/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Inline",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-ap-northeast-1",
          },
          "S3Key": "2eb6a831b107939f63cfebf68e6316e1a40f79fc99cae0fee9b333bac8d29bc4.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "StorageBucket19DB2FF8",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "EcsCluster97242B84": {
      "Properties": {
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F": {
      "Properties": {
        "Name": "difyns",
        "Vpc": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
    },
    "ExportsReader8B249524": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ReaderProps": {
          "imports": {
            "/cdk/exports/TestStack/UsEast1TestStackuseast1RefFunctionVersion2F1C2C49E5FC3A2A": "{{resolve:ssm:/cdk/exports/TestStack/UsEast1TestStackuseast1RefFunctionVersion2F1C2C49E5FC3A2A}}",
          },
          "prefix": "TestStack",
          "region": "ap-northeast-1",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCrossRegionExportReaderCustomResourceProviderHandler46647B68",
            "Arn",
          ],
        },
      },
      "Type": "Custom::CrossRegionExportReader",
      "UpdateReplacePolicy": "Delete",
    },
    "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96f77A1FE3E": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96fCustomResourcePolicyFEC5EAD4",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"SSM","action":"getParameter","parameters":{"Name":"",
              {
                "Fn::GetAtt": [
                  "ExportsReader8B249524",
                  "/cdk/exports/TestStack/UsEast1TestStackuseast1RefFunctionVersion2F1C2C49E5FC3A2A",
                ],
              },
              ""},"physicalResourceId":{"id":"1722243086555"},"region":"us-east-1"}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"SSM","action":"getParameter","parameters":{"Name":"",
              {
                "Fn::GetAtt": [
                  "ExportsReader8B249524",
                  "/cdk/exports/TestStack/UsEast1TestStackuseast1RefFunctionVersion2F1C2C49E5FC3A2A",
                ],
              },
              ""},"physicalResourceId":{"id":"1722243086555"},"region":"us-east-1"}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96fCustomResourcePolicyFEC5EAD4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:us-east-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Fn::GetAtt": [
                        "ExportsReader8B249524",
                        "/cdk/exports/TestStack/UsEast1TestStackuseast1RefFunctionVersion2F1C2C49E5FC3A2A",
                      ],
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LookupVersionArnc8a57957b31c283ffeb4ce29c334882d6b5a15a96fCustomResourcePolicyFEC5EAD4",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PostgresCluster53E5BDAB": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": "default.aurora-postgresql15",
        "DBSubnetGroupName": {
          "Ref": "PostgresClusterSubnets99BD7A61",
        },
        "DatabaseName": "main",
        "EnableHttpEndpoint": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "15.5",
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresClusterSecretC5EAFDEC",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresClusterSecretC5EAFDEC",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "Port": 5432,
        "ServerlessV2ScalingConfiguration": {
          "MaxCapacity": 2,
          "MinCapacity": 0.5,
        },
        "StorageEncrypted": true,
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "PostgresClusterSecurityGroup08DE6EE8",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresClusterSecretAttachment8DDCF2A8": {
      "Properties": {
        "SecretId": {
          "Ref": "PostgresClusterSecretC5EAFDEC",
        },
        "TargetId": {
          "Ref": "PostgresCluster53E5BDAB",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "PostgresClusterSecretC5EAFDEC": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Generated by the CDK for stack: ",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{"username":"postgres"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresClusterSecurityGroup08DE6EE8": {
      "Properties": {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "PostgresClusterSecurityGroupfromTestStackApiLambdaServiceHandlerSecurityGroup560B9482IndirectPortCFEC03C4": {
      "Properties": {
        "Description": "from TestStackApiLambdaServiceHandlerSecurityGroup560B9482:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "PostgresCluster53E5BDAB",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "PostgresClusterSecurityGroup08DE6EE8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ApiLambdaServiceHandlerSecurityGroup12E77614",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "PostgresCluster53E5BDAB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "PostgresClusterSecurityGroupfromTestStackWorkerServiceFargateServiceSecurityGroup3259E932IndirectPort6C372135": {
      "Properties": {
        "Description": "from TestStackWorkerServiceFargateServiceSecurityGroup3259E932:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "PostgresCluster53E5BDAB",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "PostgresClusterSecurityGroup08DE6EE8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "WorkerServiceFargateServiceSecurityGroupEC8152E8",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "PostgresCluster53E5BDAB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "PostgresClusterSubnets99BD7A61": {
      "Properties": {
        "DBSubnetGroupDescription": "Subnets for Cluster database",
        "SubnetIds": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
          {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "PostgresClusterWriterF88DD8CC": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "AutoMinorVersionUpgrade": true,
        "DBClusterIdentifier": {
          "Ref": "PostgresCluster53E5BDAB",
        },
        "DBInstanceClass": "db.serverless",
        "Engine": "aurora-postgresql",
        "PromotionTier": 0,
        "PubliclyAccessible": false,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresQuery0CustomResourcePolicy41175230": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "rds-data:ExecuteStatement",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds:ap-northeast-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":cluster:",
                    {
                      "Ref": "PostgresCluster53E5BDAB",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PostgresQuery0CustomResourcePolicy41175230",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PostgresQuery0FD53F567": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "PostgresQuery0CustomResourcePolicy41175230",
        "PostgresWaitForHttpEndpointReady6D04AFAC",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"rds-data","action":"ExecuteStatement","parameters":{"resourceArn":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:ap-northeast-1:",
              {
                "Ref": "AWS::AccountId",
              },
              ":cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              "","secretArn":"",
              {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
              "","sql":"CREATE DATABASE pgvector;"},"physicalResourceId":{"id":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:ap-northeast-1:",
              {
                "Ref": "AWS::AccountId",
              },
              ":cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              ""}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"rds-data","action":"ExecuteStatement","parameters":{"resourceArn":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:ap-northeast-1:",
              {
                "Ref": "AWS::AccountId",
              },
              ":cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              "","secretArn":"",
              {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
              "","sql":"CREATE DATABASE pgvector;"},"physicalResourceId":{"id":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:ap-northeast-1:",
              {
                "Ref": "AWS::AccountId",
              },
              ":cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              ""}}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresQuery1B175C979": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "PostgresQuery0FD53F567",
        "PostgresQuery1CustomResourcePolicy1E34BE89",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"rds-data","action":"ExecuteStatement","parameters":{"resourceArn":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:ap-northeast-1:",
              {
                "Ref": "AWS::AccountId",
              },
              ":cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              "","secretArn":"",
              {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
              "","database":"pgvector","sql":"CREATE EXTENSION IF NOT EXISTS vector;"},"physicalResourceId":{"id":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:ap-northeast-1:",
              {
                "Ref": "AWS::AccountId",
              },
              ":cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              ""}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"rds-data","action":"ExecuteStatement","parameters":{"resourceArn":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:ap-northeast-1:",
              {
                "Ref": "AWS::AccountId",
              },
              ":cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              "","secretArn":"",
              {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
              "","database":"pgvector","sql":"CREATE EXTENSION IF NOT EXISTS vector;"},"physicalResourceId":{"id":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":rds:ap-northeast-1:",
              {
                "Ref": "AWS::AccountId",
              },
              ":cluster:",
              {
                "Ref": "PostgresCluster53E5BDAB",
              },
              ""}}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresQuery1CustomResourcePolicy1E34BE89": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "rds-data:ExecuteStatement",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds:ap-northeast-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":cluster:",
                    {
                      "Ref": "PostgresCluster53E5BDAB",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PostgresQuery1CustomResourcePolicy1E34BE89",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PostgresWaitForHttpEndpointReady6D04AFAC": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "PostgresClusterWriterF88DD8CC",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f981117264",
            "Arn",
          ],
        },
        "createDurationSeconds": 60,
        "destroyDurationSeconds": 0,
      },
      "Type": "Custom::TimeSleep",
      "UpdateReplacePolicy": "Delete",
    },
    "RedisAuthToken9E34F6A5": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "ExcludePunctuation": true,
          "PasswordLength": 30,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "RedisBrokerUrlA8582E06": {
      "Properties": {
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              "rediss://:{{resolve:secretsmanager:",
              {
                "Ref": "RedisAuthToken9E34F6A5",
              },
              ":SecretString:::}}@",
              {
                "Fn::GetAtt": [
                  "RedisFF642DF2",
                  "PrimaryEndPoint.Address",
                ],
              },
              ":6379/1",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "RedisFF642DF2": {
      "Properties": {
        "AtRestEncryptionEnabled": true,
        "AuthToken": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "RedisAuthToken9E34F6A5",
              },
              ":SecretString:::}}",
            ],
          ],
        },
        "CacheNodeType": "cache.t4g.micro",
        "CacheSubnetGroupName": {
          "Ref": "RedisSubnetGroup2387CBFF",
        },
        "Engine": "Redis",
        "EngineVersion": "7.1",
        "MultiAZEnabled": true,
        "NumNodeGroups": 1,
        "Port": 6379,
        "ReplicasPerNodeGroup": 1,
        "ReplicationGroupDescription": "dify redis cluster",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "RedisSecurityGroupC1E9FD21",
              "GroupId",
            ],
          },
        ],
        "TransitEncryptionEnabled": true,
      },
      "Type": "AWS::ElastiCache::ReplicationGroup",
    },
    "RedisSecurityGroupC1E9FD21": {
      "Properties": {
        "GroupDescription": "TestStack/Redis/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RedisSecurityGroupfromTestStackApiLambdaServiceHandlerSecurityGroup560B94826379AE9A01E2": {
      "Properties": {
        "Description": "from TestStackApiLambdaServiceHandlerSecurityGroup560B9482:6379",
        "FromPort": 6379,
        "GroupId": {
          "Fn::GetAtt": [
            "RedisSecurityGroupC1E9FD21",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ApiLambdaServiceHandlerSecurityGroup12E77614",
            "GroupId",
          ],
        },
        "ToPort": 6379,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RedisSecurityGroupfromTestStackWorkerServiceFargateServiceSecurityGroup3259E93263795D7BE143": {
      "Properties": {
        "Description": "from TestStackWorkerServiceFargateServiceSecurityGroup3259E932:6379",
        "FromPort": 6379,
        "GroupId": {
          "Fn::GetAtt": [
            "RedisSecurityGroupC1E9FD21",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "WorkerServiceFargateServiceSecurityGroupEC8152E8",
            "GroupId",
          ],
        },
        "ToPort": 6379,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RedisSubnetGroup2387CBFF": {
      "Properties": {
        "Description": "private subnet",
        "SubnetIds": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
          {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
          },
        ],
      },
      "Type": "AWS::ElastiCache::SubnetGroup",
    },
    "StorageBucket19DB2FF8": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "StorageBucketAutoDeleteObjectsCustomResource105C81BD": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "StorageBucketPolicy41A048DB",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "StorageBucket19DB2FF8",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "StorageBucketPolicy41A048DB": {
      "Properties": {
        "Bucket": {
          "Ref": "StorageBucket19DB2FF8",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StorageBucket19DB2FF8",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StorageBucket19DB2FF8",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StorageBucket19DB2FF8",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StorageBucket19DB2FF8",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f981117264": {
      "DependsOn": [
        "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f9ServiceRole47E386BD",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";var o=Object.defineProperty;var n=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var u=(t,e)=>{for(var s in e)o(t,s,{get:e[s],enumerable:!0})},R=(t,e,s,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of d(e))!p.call(t,r)&&r!==s&&o(t,r,{get:()=>e[r],enumerable:!(a=n(e,r))||a.enumerable});return t};var S=t=>R(o({},"__esModule",{value:!0}),t);var l={};u(l,{handler:()=>g});module.exports=S(l);var c=require("timers/promises"),g=async(t,e)=>{try{switch(t.RequestType){case"Create":await(0,c.setTimeout)(t.ResourceProperties.createDurationSeconds*1e3);break;case"Update":break;case"Delete":await(0,c.setTimeout)(t.ResourceProperties.destroyDurationSeconds*1e3);break}await i("SUCCESS",t,e)}catch(s){console.log(s),await i("FAILED",t,e,s.message)}},i=async(t,e,s,a)=>{let r=JSON.stringify({Status:t,Reason:a??"See the details in CloudWatch Log Stream: "+s.logStreamName,PhysicalResourceId:s.logStreamName,StackId:e.StackId,RequestId:e.RequestId,LogicalResourceId:e.LogicalResourceId,NoEcho:!1,Data:{}});await fetch(e.ResponseURL,{method:"PUT",body:r,headers:{"Content-Type":"","Content-Length":r.length.toString()}})};0&&(module.exports={handler});
",
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f9ServiceRole47E386BD",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "TimeSleepCustomResourceHandler494c1b460d2f4e3b9bfd0b2cf10162f9ServiceRole47E386BD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Vpc8378EB38": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet1Subnet536B997A": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet2NATGateway9182C01D",
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet2RouteTableA678073B": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet2Subnet3788AAA1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet1EIPD7E02669": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet1NATGateway4D7517AA": {
      "DependsOn": [
        "VpcPublicSubnet1DefaultRoute3DA9E72A",
        "VpcPublicSubnet1RouteTableAssociation97140677",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet1RouteTable6C95E38E": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet1Subnet5C2D37C4": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet2DefaultRoute97F91067": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet2EIP3C605A87": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet2NATGateway9182C01D": {
      "DependsOn": [
        "VpcPublicSubnet2DefaultRoute97F91067",
        "VpcPublicSubnet2RouteTableAssociationDD5762D8",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet2EIP3C605A87",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet2RouteTable94F7E489": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet2Subnet691E08A3": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcVPCGWBF912B6E": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "WebLambdaServiceHandler3688296A": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
        "WebLambdaServiceHandlerServiceRole16141B41",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.ap-northeast-1.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-ap-northeast-1:548e46832b441b3aa56b3684627cd37a75800d124c5cfdfd4cbf58b60f88d701",
          },
        },
        "Environment": {
          "Variables": {
            "APP_API_URL": "",
            "AWS_LWA_PORT": "3000",
            "CONSOLE_API_URL": "",
            "DEBUG": "false",
            "LOG_LEVEL": "ERROR",
            "PORT": "3000",
          },
        },
        "MemorySize": 512,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "WebLambdaServiceHandlerServiceRole16141B41",
            "Arn",
          ],
        },
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "WebLambdaServiceHandlerSecurityGroup8A5DFAB2",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Ref": "VpcPrivateSubnet1Subnet536B997A",
            },
            {
              "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebLambdaServiceHandlerAllowCloudFrontServicePrincipalEDDEE9FA": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "Action": "lambda:InvokeFunctionUrl",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebLambdaServiceHandler3688296A",
            "Arn",
          ],
        },
        "Principal": "cloudfront.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:cloudfront::",
              {
                "Ref": "AWS::AccountId",
              },
              ":distribution/",
              {
                "Ref": "CFGatewayFrontendDistribution2264C2A4",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebLambdaServiceHandlerFunctionUrlC1B14071": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "AuthType": "AWS_IAM",
        "InvokeMode": "BUFFERED",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "WebLambdaServiceHandler3688296A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Url",
    },
    "WebLambdaServiceHandlerSecurityGroup8A5DFAB2": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function TestStackWebLambdaServiceHandlerA166A190",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WebLambdaServiceHandlerServiceRole16141B41": {
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WorkerServiceFargateService83FD39CB": {
      "DependsOn": [
        "WorkerServiceTaskTaskRoleDefaultPolicyB05718F5",
        "WorkerServiceTaskTaskRoleC99169CE",
      ],
      "Properties": {
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Weight": 0,
          },
          {
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 1,
          },
        ],
        "Cluster": {
          "Ref": "EcsCluster97242B84",
        },
        "DeploymentConfiguration": {
          "Alarms": {
            "AlarmNames": [],
            "Enable": false,
            "Rollback": false,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "EnableECSManagedTags": false,
        "EnableExecuteCommand": true,
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "WorkerServiceFargateServiceSecurityGroupEC8152E8",
                  "GroupId",
                ],
              },
            ],
            "Subnets": [
              {
                "Ref": "VpcPrivateSubnet1Subnet536B997A",
              },
              {
                "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
              },
            ],
          },
        },
        "TaskDefinition": {
          "Ref": "WorkerServiceTaskEB3CD2E8",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "WorkerServiceFargateServiceSecurityGroupEC8152E8": {
      "DependsOn": [
        "WorkerServiceTaskTaskRoleDefaultPolicyB05718F5",
        "WorkerServiceTaskTaskRoleC99169CE",
      ],
      "Properties": {
        "GroupDescription": "TestStack/WorkerService/FargateService/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WorkerServiceTaskEB3CD2E8": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "MODE",
                "Value": "worker",
              },
              {
                "Name": "LOG_LEVEL",
                "Value": "ERROR",
              },
              {
                "Name": "DEBUG",
                "Value": "false",
              },
              {
                "Name": "MIGRATION_ENABLED",
                "Value": "true",
              },
              {
                "Name": "REDIS_HOST",
                "Value": {
                  "Fn::GetAtt": [
                    "RedisFF642DF2",
                    "PrimaryEndPoint.Address",
                  ],
                },
              },
              {
                "Name": "REDIS_PORT",
                "Value": "6379",
              },
              {
                "Name": "REDIS_USE_SSL",
                "Value": "true",
              },
              {
                "Name": "REDIS_DB",
                "Value": "0",
              },
              {
                "Name": "STORAGE_TYPE",
                "Value": "s3",
              },
              {
                "Name": "S3_BUCKET_NAME",
                "Value": {
                  "Ref": "StorageBucket19DB2FF8",
                },
              },
              {
                "Name": "S3_REGION",
                "Value": "ap-northeast-1",
              },
              {
                "Name": "DB_DATABASE",
                "Value": "main",
              },
              {
                "Name": "VECTOR_STORE",
                "Value": "pgvector",
              },
              {
                "Name": "PGVECTOR_DATABASE",
                "Value": "pgvector",
              },
            ],
            "Essential": true,
            "Image": "langgenius/dify-api:0.6.15",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "WorkerServiceTaskMainLogGroupA90F15B8",
                },
                "awslogs-region": "ap-northeast-1",
                "awslogs-stream-prefix": "log",
              },
            },
            "Name": "Main",
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PORT",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_USER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_PORT",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGVECTOR_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "REDIS_PASSWORD",
                "ValueFrom": {
                  "Ref": "RedisAuthToken9E34F6A5",
                },
              },
              {
                "Name": "CELERY_BROKER_URL",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:ap-northeast-1:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter/",
                      {
                        "Ref": "RedisBrokerUrlA8582E06",
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "SECRET_KEY",
                "ValueFrom": {
                  "Ref": "ApiServiceEncryptionSecretF73F9ECD",
                },
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "WorkerServiceTaskExecutionRoleFF871AC9",
            "Arn",
          ],
        },
        "Family": "TestStackWorkerServiceTask7B4B1923",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "RuntimePlatform": {
          "CpuArchitecture": "X86_64",
        },
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "WorkerServiceTaskTaskRoleC99169CE",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "WorkerServiceTaskExecutionRoleDefaultPolicyD3383FFB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "WorkerServiceTaskMainLogGroupA90F15B8",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresClusterSecretAttachment8DDCF2A8",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "RedisAuthToken9E34F6A5",
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:ap-northeast-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    {
                      "Ref": "RedisBrokerUrlA8582E06",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "ApiServiceEncryptionSecretF73F9ECD",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WorkerServiceTaskExecutionRoleDefaultPolicyD3383FFB",
        "Roles": [
          {
            "Ref": "WorkerServiceTaskExecutionRoleFF871AC9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WorkerServiceTaskExecutionRoleFF871AC9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "WorkerServiceTaskMainLogGroupA90F15B8": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "WorkerServiceTaskTaskRoleC99169CE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "WorkerServiceTaskTaskRoleDefaultPolicyB05718F5": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StorageBucket19DB2FF8",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StorageBucket19DB2FF8",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "bedrock:InvokeModel",
                "bedrock:InvokeModelWithResponseStream",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WorkerServiceTaskTaskRoleDefaultPolicyB05718F5",
        "Roles": [
          {
            "Ref": "WorkerServiceTaskTaskRoleC99169CE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
